# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  
  lint:
    docker:
        - image: cimg/rust:1.70.0
        - image: cimg/postgres:15.3
    steps:
      - checkout
      - run:
          name: Install Clippy
          command: rustup component add clippy
      - run:
          name: Linting
          command: cargo clippy -- -D warnings
  
  build-test-backend:
    docker:
        - image: cimg/rust:1.70.0
        - image: cimg/postgres:15.3
    environment:
      # Fail the build if there are warnings
      RUSTFLAGS: '-D warnings'
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - v1-cargo-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
      - run: 
          name: Install postresgl libs
          command: |
            sudo apt install -y postgresql-client postgresql-client-common; \
            cargo install --version=0.6.3 sqlx-cli --no-default-features --features postgres,rustls,uuid,chrono
      - run:
          name: Migrate database
          command: SKIP_DOCKER=true ./scripts/init_db.sh
      - run:
          name: Check sqlx-data.json is up-to-date
          command: cargo sqlx prepare --check -- --bin backend
      - run:
          name: Build all targets
          command: cargo build
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: v1-cargo-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Run all backend tests
          command: cargo test

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  build-test:
    jobs:
      - lint
      - build-test-backend

